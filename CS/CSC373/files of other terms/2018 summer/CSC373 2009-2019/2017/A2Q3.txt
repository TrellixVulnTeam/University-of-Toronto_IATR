(a) Construct a complete directed graph G = ([n], E), i.e., E = {(i,j) | i,j in [n]}. Let 2DDistance((x,y),(z,w)) be the Euclidean 2d distance between the points (x,y) and (z,w). For each edge (i,j) introduce weight W(i,j) = max(2DDistance((x_i,y_i),(x_j,y_j)) - l, 0) - note we subtract l to account for the existing power cable of length l. Run modified Dijkstra's algorithm to find the minimum value of an edge-weight such that we can get from s to t.

(b)
ModifiedDijkstra(Pos,n,s,t,l) // Pos is an array of 2d positions
  init array W of size n x n
  for i = 1 to n
    for j = 1 to n
      W[i,j] = max(2DDistance(Pos[i], Pos[j])-l, 0)
  init array d of size n
  for i = 1 to n
    d[i] = infinity
  d[s] = 0
  Q = PriorityQueue([n]) // by d[] values
  while Q is not empty
    v = Q.ExtractMin()
    for u = 1 to n
      if u == v continue
      if max(d[v],W[v,u]) < d[u]
        d[u] = max(d[v], W[v,u]) 
        above line causes queue update
  return d[t]

(c) Let U be the set of processed vertices at some point during the runtime of the ModifiedDijkstra. These are the vertices that have been extracted from the priority queue. Let T = [n]\U be the set of vertices that have not yet been processed at this point during the runtime of the ModifiedDijkstra. I am going to use a loop invariant that consists of two parts. The first part states that for each u in U, d[u] stores the smallest L sufficient to reach u from s, and for each u in U and each v in T, L corresponding to u is <= L corresponding to u. The second part says that for every v in T, the algorithm stores the smallest L sufficient to reach v from s using only nodes in U as intermediate nodes. Initialization (base case) is easy to prove. In the inductive step we need to say that the loop invariant is maintained during one iteration of the while loop. During the iteration, a vertex, call it v, with smallest d[] value is extracted from T and is placed into U. It is easy to see that if v has the smallest d[] value among all vertices in T, then reaching v from s with smallest value of L uses only nodes from U as intermediate nodes (using other nodes would result in L >= d[v], since other nodes would have to come from T) -- thus, d[v] is computed correctly. This proves that the first part of the loop invariant is maintained. The second part of the loop invariant is maintained after processing all neighbors of v. Prior to the iteration, for each w in T, d[w] stored smallest L sufficient to reach w from s using nodes from U. Now, v is added to U, and we need to update for each w in T d[w] to store the smallest L sufficient to reach w from s using nodes from U union {v} as intermediate nodes. Such a path either (a) doesn't use v at all, or (b) uses v. If the path uses v then without loss of generality it can be assumed to be a predecessor of w. Thus, d[w] needs to be updated to min(d[w],max(d[v],W[v,w])). This is what the algorithm does. At termination, T = empty (since the graph is connected and every vertex is reachable from s), and t is in U. Thus, d[t] stores the right value of L.

(d) Algorithm takes O(n^2) to construct the W[] array. After that, the algorithm performs n ExtractMin() operations and O(n^2) Update() operations on the priority queue. If the priority queue is implemented using binary heap, the overall runtime is dominated by performing Update() operations and becomes O(n^2 log n). A better runtime is achieved if you use a simple array implementation of the priority queue. With an array implementation, ExtractMin() costs O(n) because you need to perform a linear search in the array to find the minimum element, but Update() operation becomes O(1). Thus, with an array implementation of the priority queue, the overall runtime is O(n^2).