==============================================================================
CSC 373                 Tutorial Exercises for Week  3               Fall 2014
==============================================================================


Consider again the problem of making change when the denominations are
arbitrary.

 * Input: Positive integer "amount" A, positive integer "denominations"
   d[1] < d[2] < ... < d[m].
 * Output: List of "coins" c = [c[1],c[2],...,c[n]] where each c[i] is in d,
   repeated coins are allowed (c[i] = c[j] for i != j), c[1] + ... + c[n] = A,
   and n is minimum. If no solution is possible, n = 0 and the list is empty.

For example, if we only have pennies, dimes and quarters to make change for
30c, then the input is d = [1,10,25] and an optimum output is c = [10,10,10].
If we only have nickels, dimes and quarters to make change for 52c, then an
optimum output is c = [].

Follow the dynamic programming paradigm given in class to solve this problem.
 0. Describe the recursive structure of sub-problems.
 1. Define an array that stores optimum values for arbitrary sub-problems.
 2. Give a recurrence relation for the array values, based on the recursive
    structure of sub-problems.
 3. Write a simple algorithm to compute the array values bottom-up.
 4. Use the computed array values to reconstruct an optimum solution; when
    necessary, define a second array to store partial information about
    solutions and modify the algorithm from part 3 accordingly.

Then, analyse the worst-case runtime of your algorithm carefully. Does it run
in polynomial time? Explain.

