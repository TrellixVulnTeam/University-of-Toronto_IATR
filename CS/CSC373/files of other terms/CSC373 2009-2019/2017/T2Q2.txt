(a) Cycle of min weight consists of an edge (i,j) plus a shortest path from j to i (by the standard cut-and-paste argument). Compute all pairs shortest paths using Floyd-Warshall. Keep a running solution, for each edge check if completing it with a shortest path results in a cycle of smaller weight -- update the running solution accordingly.

(b)
MinCycle(G=([n],E), w)
  init array D of size n^3
  for i = 1 to n
    for j = 1 to n
      if (i,j) in E
        D[i,j,0] = w[i,j]
      else
        D[i,j,0] = infinity
  for k = 1 to n
    for i = 1 to n
      for j = 1 to n
        D[i,j,k] = min(D[i,j,k-1],D[i,k,k-1]+D[k,j,k-1])
  ans = infinity
  for (i,j) in E
    if w[i,j] + D[j,i,n] < ans
      ans = w[i,j] + D[j,i,n]
  return ans

(c) 
Floyd-Warshall takes O(n^3). The last loop takes O(|E|) = O(n^2). Thus, the overall runtime is O(n^3).