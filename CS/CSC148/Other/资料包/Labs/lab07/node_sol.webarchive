bplist00—_WebMainResource’	
_WebResourceFrameName^WebResourceURL_WebResourceData_WebResourceMIMEType_WebResourceTextEncodingNameP_Ahttp://www.cdf.toronto.edu/~csc148h/winter/Labs/lab07/node_sol.pyO3ã<html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">class LLNode:
    '''Node to be used in linked list

    nxt: LLNode -- next node
                   None iff we're at end of list
    value: object --- data for current node
    '''

    def __init__(self, value, nxt=None):
        ''' (LLNode, object, LLNode) -&gt; NoneType

        Create LLNode (self) with data value and successor nxt.
        '''
        self.value, self.nxt = value, nxt

    def __repr__(self):
        ''' (LLNode) -&gt; str

        Return a string representation of LLNode (self) that can yield
        an equivalent LLNode if evaluated in Python.

        &gt;&gt;&gt; n = LLNode(5, LLNode(7))
        &gt;&gt;&gt; n.nxt
        LLNode(7)
        &gt;&gt;&gt; n
        LLNode(5, LLNode(7))
        '''
        if self.nxt is None:
            return 'LLNode({})'.format(repr(self.value))
        else:
            return 'LLNode({}, {})'.format(repr(self.value), repr(self.nxt))

    def __str__(self):
        ''' (LLNode) -&gt; str

        Return a user-friendly representation of this LLNode.

        &gt;&gt;&gt; n = LLNode(5, LLNode(7))
        &gt;&gt;&gt; print(n)
        5 -&gt; 7 -&gt;|
        '''
        if self.nxt is None:
            return '{} -&gt;|'.format(str(self.value))
        else:
            return '{} -&gt; {}'.format(str(self.value), str(self.nxt))

    def __eq__(self, other):
        ''' (LLNode, object) -&gt; bool

        Return whether LLNode (self) is equivalent to other.

        &gt;&gt;&gt; LLNode(5).__eq__(5)
        False
        &gt;&gt;&gt; n = LLNode(5, LLNode(7))
        &gt;&gt;&gt; n2 = LLNode(5, LLNode(7, None))
        &gt;&gt;&gt; n.__eq__(n2)
        True
        '''
        return (type(self) == type(other) and
                (self.value, self.nxt) == (other.value, other.nxt))


class LinkedList:
    '''Collection of LLNodes organized into a linked list.

    front: LLNode -- front of list
    back:  LLNode -- back of list'''

    def __init__(self):
        ''' (LinkedList) -&gt; NoneType

        Create an empty linked list.
        '''
        self.front, self.back = None, None
        self.size = 0

    def __str__(self):
        ''' (LinkedList) -&gt; str

        Return a human-friendly string representation of
        LinkedList (self)

        &gt;&gt;&gt; lnk = LinkedList()
        &gt;&gt;&gt; lnk.prepend(5)
        &gt;&gt;&gt; print(lnk)
        5 -&gt;|
        '''
        return str(self.front)

    def __eq__(self, other):
        ''' (LinkedList, object) -&gt; bool

        Return whether LinkedList (self) is equivalent to
        other.

        &gt;&gt;&gt; LinkedList().__eq__(None)
        False
        &gt;&gt;&gt; lnk = LinkedList()
        &gt;&gt;&gt; lnk.prepend(5)
        &gt;&gt;&gt; lnk2 = LinkedList()
        &gt;&gt;&gt; lnk2.prepend(5)
        &gt;&gt;&gt; lnk.__eq__(lnk2)
        True
        '''
        return (type(self) == type(other) and
                (self.size, self.front) == (other.size, other.front))

    def append(lnk, value):
        ''' (LinkedList, object) -&gt; NoneType

        Insert a new node with value at back of lnk.

        &gt;&gt;&gt; lnk = LinkedList()
        &gt;&gt;&gt; lnk.append(5)
        &gt;&gt;&gt; lnk.size
        1
        &gt;&gt;&gt; print(lnk.front)
        5 -&gt;|
        &gt;&gt;&gt; lnk.append(6)
        &gt;&gt;&gt; lnk.size
        2
        &gt;&gt;&gt; print(lnk.front)
        5 -&gt; 6 -&gt;|
        '''
        new_node = LLNode(value)
        if lnk.back:
            lnk.back.nxt = new_node
            lnk.back = new_node
        else:
            lnk.back = lnk.front = new_node
        lnk.size += 1

    def prepend(self, value):
        ''' (LinkedList, object) -&gt; Nonetype

        Insert value at front of LLNode (self).

        &gt;&gt;&gt; lnk = LinkedList()
        &gt;&gt;&gt; lnk.prepend(0)
        &gt;&gt;&gt; lnk.prepend(1)
        &gt;&gt;&gt; lnk.prepend(2)
        &gt;&gt;&gt; str(lnk.front)
        '2 -&gt; 1 -&gt; 0 -&gt;|'
        &gt;&gt;&gt; lnk.size
        3
        '''
        self.front = LLNode(value, self.front)
        if self.back is None:
            self.back = self.front
        self.size += 1

    def delete_front(self):
        ''' (LinkedList) -&gt; NoneType

        Delete front node from LinkedList (self).

        self.front must not be None

        &gt;&gt;&gt; lnk = LinkedList()
        &gt;&gt;&gt; lnk.prepend(0)
        &gt;&gt;&gt; lnk.prepend(1)
        &gt;&gt;&gt; lnk.prepend(2)
        &gt;&gt;&gt; lnk.delete_front()
        &gt;&gt;&gt; str(lnk.front)
        '1 -&gt; 0 -&gt;|'
        &gt;&gt;&gt; lnk.size
        2
        '''
        assert self.front, ('Cannot delete empty list {}'.
                            format(self))
        self.front = self.front.nxt
        self.size -= 1

    def __getitem__(self, index):
        ''' (LinkedList, int|slice) -&gt; object

        Return the value at position index.
        # don't fuss about slices yet.

        &gt;&gt;&gt; lnk = LinkedList()
        &gt;&gt;&gt; lnk.prepend(1)
        &gt;&gt;&gt; lnk.prepend(0)
        &gt;&gt;&gt; lnk.__getitem__(1)
        1
        &gt;&gt;&gt; lnk[-2]
        0
        '''
        if index &gt; self.size - 1 or self.size == 0:
            raise Exception('out of range')
        elif index &lt; 0:
            return self.__getitem__(self.size + index)
        else:
            current_node = self.front
            assert index &lt; self.size, ('Index: {} too big for node {}'.
                                       format(index, current_node))
            for i in range(0, index):
                current_node = current_node.nxt
            return current_node.value

    def __setitem__(self, index, value):
        ''' (LinkedList, int|slice, object) -&gt; NoneType

        Set the value at index to value, if index is in range, otherwise
        raise an IndexError.  Indexs are counted from 0. Note that negative
        integers can be adjusted by adding self.size, to get a index in
        range.

        &gt;&gt;&gt; lnk = LinkedList()
        &gt;&gt;&gt; lnk.prepend(5)
        &gt;&gt;&gt; lnk.prepend(7)
        &gt;&gt;&gt; lnk.__setitem__(1, 9)
        &gt;&gt;&gt; print(lnk.front)
        7 -&gt; 9 -&gt;|
        &gt;&gt;&gt; lnk[0] = 3
        &gt;&gt;&gt; print(lnk.front)
        3 -&gt; 9 -&gt;|
        &gt;&gt;&gt; lnk[-1] = 8
        &gt;&gt;&gt; print(lnk.front)
        3 -&gt; 8 -&gt;|
        '''
        if index &gt;= self.size or self.size == 0:
            raise IndexError('Out of range')
        elif index &lt; 0:
            return self.__setitem__(self.size + index, value)
        else:
            cur_node = self.front
            assert 0 &lt;= index &lt; self.size, ('Index {} too big for node {}'.
                                            format(cur_node))
        for step in range(0, index):
            cur_node = cur_node.nxt
        cur_node.value = value

    def __contains__(self, value):
        ''' (LinkedList, object) -&gt; bool

        Return whether LinkedList (self) contains value.

        &gt;&gt;&gt; lnk = LinkedList()
        &gt;&gt;&gt; lnk.prepend(0)
        &gt;&gt;&gt; lnk.prepend(1)
        &gt;&gt;&gt; lnk.prepend(2)
        &gt;&gt;&gt; lnk.__contains__(1)
        True
        &gt;&gt;&gt; lnk.__contains__(3)
        False
        '''
        current_node = self.front
        while current_node:
            if value == current_node.value:
                return True
            current_node = current_node.nxt
        return False

    def __add__(self, other):
        ''' (LinkedList, LinkedList) -&gt; LinkedList

        Concatenate LinkedList (self) to LinkedList (other) and
        return a new list, leaving self and other unchanged.

        &gt;&gt;&gt; lnk1 = LinkedList()
        &gt;&gt;&gt; lnk1.prepend(5)
        &gt;&gt;&gt; lnk2 = LinkedList()
        &gt;&gt;&gt; lnk2.prepend(7)
        &gt;&gt;&gt; lnk3 = lnk1.__add__(lnk2)
        &gt;&gt;&gt; print(lnk3.front)
        5 -&gt; 7 -&gt;|
        &gt;&gt;&gt; print(lnk1.front)
        5 -&gt;|
        &gt;&gt;&gt; print(lnk2.front)
        7 -&gt;|
        '''
        # assume append is already implemented
        new_list = LinkedList()
        cur_node = self.front
        while cur_node:
            new_list.append(cur_node.value)
            cur_node = cur_node.nxt
        cur_node = other.front
        while cur_node:
            new_list.append(cur_node.value)
            cur_node = cur_node.nxt
        return new_list


def insert_before(lnk, v1, v2):
    ''' (LinkedList, object) -&gt; NoneType

    Insert a new node with value v1 before the first occurrence
    of a node with value v2.  Do nothing if no node has value
    v2.

    &gt;&gt;&gt; lnk = LinkedList()
    &gt;&gt;&gt; lnk.prepend(5)
    &gt;&gt;&gt; insert_before(lnk, 4, 5)
    &gt;&gt;&gt; print(lnk.front)
    4 -&gt; 5 -&gt;|
    &gt;&gt;&gt; insert_before(lnk, 3, 5)
    &gt;&gt;&gt; print(lnk.front)
    4 -&gt; 3 -&gt; 5 -&gt;|
    &gt;&gt;&gt; insert_before(lnk, 3, 7)
    &gt;&gt;&gt; print(lnk)
    4 -&gt; 3 -&gt; 5 -&gt;|
    '''
    if lnk.size &gt; 0:
        prev_node = None
        cur_node = lnk.front
        while cur_node and not cur_node.value == v2:
            prev_node = cur_node
            cur_node = cur_node.nxt
        assert cur_node is None or cur_node.value == v2, (
            'Bad cur_node: {}'.format(cur_node))
        assert prev_node is None or prev_node.nxt == cur_node, (
            'Bad prev_node: {}'.format(prev_node))
        if cur_node:
            cur_node = LLNode(v1, cur_node)
            if prev_node is None:
                lnk.front = cur_node
            else:
                prev_node.nxt = cur_node
            lnk.size += 1


def delete_after(lnk, value):
    ''' (LinkedList, object) -&gt; NoneType

    Delete node with value after the first occurrence of a
    node containing value, if possible.

    &gt;&gt;&gt; lnk = LinkedList()
    &gt;&gt;&gt; lnk.append(3)
    &gt;&gt;&gt; lnk.append(5)
    &gt;&gt;&gt; lnk.append(7)
    &gt;&gt;&gt; lnk.append(9)
    &gt;&gt;&gt; delete_after(lnk, 3)
    &gt;&gt;&gt; print(lnk)
    3 -&gt; 7 -&gt; 9 -&gt;|
    &gt;&gt;&gt; delete_after(lnk, 7)
    &gt;&gt;&gt; print(lnk)
    3 -&gt; 7 -&gt;|
    &gt;&gt;&gt; delete_after(lnk, 15)
    &gt;&gt;&gt; print(lnk)
    3 -&gt; 7 -&gt;|
    '''
    if lnk.front:
        cur_node = lnk.front
        # walk along the list
        while cur_node and not cur_node.value == value:
            cur_node = cur_node.nxt
        if cur_node and cur_node.nxt:
            if lnk.back is cur_node.nxt:
                lnk.back = cur_node
            cur_node.nxt = cur_node.nxt.nxt
            lnk.size -= 1


def delete_back(lnk):
    ''' (LinkedList) -&gt; NoneType

    Delete back node of lnk, if it exists, otherwise
    do nothing.

    &gt;&gt;&gt; lnk = LinkedList()
    &gt;&gt;&gt; lnk.prepend(5)
    &gt;&gt;&gt; lnk.prepend(7)
    &gt;&gt;&gt; print(lnk.front)
    7 -&gt; 5 -&gt;|
    &gt;&gt;&gt; delete_back(lnk)
    &gt;&gt;&gt; lnk.size
    1
    &gt;&gt;&gt; print(lnk.front)
    7 -&gt;|
    &gt;&gt;&gt; delete_back(lnk)
    &gt;&gt;&gt; lnk.size
    0
    &gt;&gt;&gt; print(lnk.front)
    None
    '''
    if lnk.size &gt; 0:
        prev_node, cur_node = None, lnk.front
        # walk along until cur_node is lnk.back
        while cur_node.nxt:
            prev_node = cur_node
            cur_node = cur_node.nxt
        lnk.back = prev_node
        if lnk.back is None:
            lnk.front = None
        else:
            lnk.back.nxt = None
        lnk.size -= 1


def odd_nodes(lnk):
    ''' (LinkedList) -&gt; LinkedList

    Return a new linked list with values of odd-indexed nodes of lnk.

    &gt;&gt;&gt; lnk = LinkedList()
    &gt;&gt;&gt; lnk.append(3)
    &gt;&gt;&gt; lnk.append(5)
    &gt;&gt;&gt; lnk.append(7)
    &gt;&gt;&gt; lnk.append(9)
    &gt;&gt;&gt; lnk2 = odd_nodes(lnk)
    &gt;&gt;&gt; print(lnk2)
    5 -&gt; 9 -&gt;|
    '''
    new_list = LinkedList()
    counter, cur_node = 0, lnk.front
    while cur_node:
        if counter % 2 == 1:
            new_list.append(cur_node.value)
        counter += 1
        cur_node = cur_node.nxt
    return new_list


def filter_nodes(lnk, f):
    ''' (LinkedList, function) -&gt; LinkedList

    Return a new linked list with values of lnk for
    nodes that satisfy boolean-valued function f.

    &gt;&gt;&gt; lnk = LinkedList()
    &gt;&gt;&gt; lnk.append(3)
    &gt;&gt;&gt; lnk.append(4)
    &gt;&gt;&gt; lnk.append(5)
    &gt;&gt;&gt; lnk.append(6)
    &gt;&gt;&gt; def f(node): return node.value % 2 == 0
    &gt;&gt;&gt; lnk2 = filter_nodes(lnk, f)
    &gt;&gt;&gt; print(lnk2)
    4 -&gt; 6 -&gt;|
    '''
    new_list, cur_node = LinkedList(), lnk.front
    while cur_node:
        if f(cur_node):
            new_list.append(cur_node.value)
        cur_node = cur_node.nxt
    return new_list


if __name__ == '__main__':
    import doctest
    doctest.testmod()
</pre><embed id="xunlei_com_thunder_helper_plugin_d462f475-c18e-46be-bd10-327458d045bd" type="application/thunder_download_plugin" height="0" width="0"></body></html>]text/x-pythonUUTF-8    ( ? N ` v î ï Ÿ4h4v                           4|